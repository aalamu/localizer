# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Install GPG
      run: sudo apt-get update && sudo apt-get install -y gnupg

    - uses: actions/checkout@v3
    - name: Set up GPG
      run: |
        # Import the private key (base64 encoded)
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --import
        # Trust the key
        gpg --edit-key "${{ secrets.GPG_PUB_KEY }}" trust
        # Set the default key
        gpgconf --change-ownertrust
        gpg --default-key "${{ secrets.GPG_PUB_KEY }}"
        # Configure gpg-agent to not prompt for passphrase
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg-agent.conf
        echo "default-cache-ttl 3600" >> ~/.gnupg/gpg-agent.conf # Cache for 1 hour
        echo "max-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf   # Max cache for 2 hours
        gpg-connect-agent reloadagent /bye

    # - name: Create and Set GPG Home Directory Permissions
    #   run: |
    #     mkdir -p ~/.gnupg
    #     chmod 700 ~/.gnupg

    # - name: Configure GPG for non-interactive use
    #   run: |
    #     mkdir -p ~/.gnupg
    #     chmod 700 ~/.gnupg
    #     echo "use-agent" >> ~/.gnupg/gpg.conf
    #     echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
    #     echo "no-tty" >> ~/.gnupg/gpg.conf  # Disables tty interactions

    # - name: Import GPG Private Key
    #   run: |
    #     mkdir -p ~/.gnupg
    #     echo "${{ secrets.GPG_PRIVATE_KEY }}" > private-key.asc
    #     gpg --batch --import private-key.asc
    #     rm private-key.asc
    #     gpg --list-secret-keys --keyid-format LONG  # List keys to verify import

    # - name: Set GPG Default Key and Passphrase
    #   run: |
    #     echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --default-key "${{ secrets.GPG_PUB_KEY }}"
    #   env:
    #     GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Clean
      run: mvn clean

    - name: Install
      run: mvn install
    
    - name: Verify
      run: mvn verify
    
    - name: Test
      run: mvn test
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Configure settings.xml
      run: |
        cd ~
        ls
        cd .m2
        rm settings.xml || true # Remove files, ignore errors if they don't exist
        touch ./settings.xml
        echo "${{ secrets.SETTINGS_XML }}" | base64 --decode > ./settings.xml
      shell: bash

    - name: Deploy
      run: mvn deploy -Pgpg
